import json
import os
import subprocess
import sys
import tempfile
from shutil import which

from github import Github
from pytz import timezone

moscow_tz = timezone("Europe/Moscow")

if not which("cloc"):
    sys.exit("cloc –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")

GITHUB_TOKEN = os.getenv('TKN')
if not GITHUB_TOKEN:
    sys.exit("–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TKN")

ORG_NAME = "Nata-Practices"
g = Github(GITHUB_TOKEN)
org = g.get_organization(ORG_NAME)

readme_template = """
<h1 align="center">üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <strong>{org_name}</strong>!</h1>

<p align="center">
  <img src="https://img.shields.io/badge/–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤-{repo_count}-blue" alt="Repo Count" />
  <img src="https://img.shields.io/badge/–°—Ç—Ä–æ–∫_–∫–æ–¥–∞-{total_lines}-brightgreen" alt="Total Lines" />
  <img src="https://img.shields.io/badge/–§–∞–π–ª–æ–≤-{total_files}-yellow" alt="Total Files" />
  <img src="https://img.shields.io/badge/–û–±—ä–µ–º_—Ö—Ä–∞–Ω–∏–ª–∏—â–∞-{total_storage}MB-purple" alt="Total Storage" />
  <img src="https://img.shields.io/badge/–ö–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä—ã-{total_contributors}-orange" alt="Contributors" />
  <img src="https://img.shields.io/badge/–ê–∫—Ç–∏–≤–Ω—ã—Ö_—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤-{active_contributors}-red" alt="Active Contributors" />
  <img src="https://img.shields.io/badge/–ü–æ—Å–ª–µ–¥–Ω—è—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å-{last_activity}-brightgreen" alt="Last Activity" />
</p>

## üåê –Ø–∑—ã–∫–∏
{languages_section}

<hr/>

## üìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
{repositories_section}
"""

# –ò–∫–æ–Ω–∫–∏ –¥–ª—è —è–∑—ã–∫–æ–≤ (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ)
language_icons = {
    "Python": '<img src="https://cdn.simpleicons.org/python?viewbox=auto" height="20" alt="Python">',
    "C#": '<img src="https://img.shields.io/badge/C%23-0?color=9b4993" height="20" alt="C#">',
    "Kotlin": '<img src="https://cdn.simpleicons.org/kotlin?viewbox=auto" height="20" alt="Kotlin">',
    "Java": '<img src="https://cdn.simpleicons.org/openjdk?viewbox=auto" height="20" alt="Java">',
    "N/A": '<img src="https://cdn.simpleicons.org/c#?viewbox=auto" height="20" alt="Unknown">'
}


def format_languages_table(code_lines_per_language: dict, bytes_per_language: dict) -> str:
    """
    –°—Ç—Ä–æ–∏—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ (code_lines_per_language) –∏ –±–∞–π—Ç–æ–≤ (bytes_per_language).
    """
    if not code_lines_per_language:
        return "_–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —è–∑—ã–∫–∞–º_"

    total_lines_local = sum(code_lines_per_language.values())
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —è–∑—ã–∫–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
    sorted_languages = sorted(
        code_lines_per_language.items(),
        key=lambda x: x[1],
        reverse=True
    )

    header = "| ‚Ññ | –Ø–∑—ã–∫ | –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è | –ö–æ–ª-–≤–æ –±–∞–π—Ç |\n"
    header += "|---|------|-----------------------|-------------|\n"

    rows = []
    for rank, (lang, loc) in enumerate(sorted_languages, start=1):
        icon = language_icons.get(lang, language_icons["N/A"])
        # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∫–æ–¥–∞
        percent = (loc / total_lines_local) * 100
        # –±–∞–π—Ç—ã –±–µ—Ä–µ–º –∏–∑ GitHub API (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç–∞–º –Ω–µ –±—ã–ª–æ —ç—Ç–æ–≥–æ —è–∑—ã–∫–∞, –±—É–¥–µ—Ç 0)
        byte_size = bytes_per_language.get(lang, 0)
        rows.append(
            f"| {rank} | {icon} | {percent:.2f}% | {byte_size} |"
        )

    return header + "\n".join(rows)


def format_repos_table(repos_info: list) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º.
    """
    if not repos_info:
        return "_–ù–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤_"

    header = "| –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π | –Ø–∑—ã–∫ | –°—Ç—Ä–æ–∫ –∫–æ–¥–∞ | –§–∞–π–ª–æ–≤ | –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç | –û–ø–∏—Å–∞–Ω–∏–µ |\n"
    header += "|-------------|------|------------|--------|------------------|----------|\n"
    rows = []
    for r in repos_info:
        icon = language_icons.get(r['language'], language_icons["N/A"])
        row = (
            f"| [{r['name']}]({r['html_url']}) "
            f"| {icon} "
            f"| {r['lines']} "
            f"| {r['files']} "
            f"| {r['last_commit']} "
            f"| {r['description']} |"
        )
        rows.append(row)

    return header + "\n".join(rows)


# ---------------------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
# ---------------------------------------------

repo_count = 0
total_lines = 0       # –û–±—â–µ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ (—Å—É–º–º–∞ –ø–æ –≤—Å–µ–º —Ä–µ–ø–æ)
total_files = 0       # –û–±—â–µ–µ —á–∏—Å–ª–æ —Ñ–∞–π–ª–æ–≤ (—Å—É–º–º–∞ –ø–æ –≤—Å–µ–º —Ä–µ–ø–æ)
total_storage = 0     # –°—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä—ë–º –≤ MB
last_activity = None
all_contributors = set()
active_contributors = set()

# –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —è–∑—ã–∫–∞–º:
code_lines_per_language = {}  # –ó–¥–µ—Å—å –∞–∫–∫—É–º—É–ª–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ (cloc)
bytes_per_language = {}       # –ó–¥–µ—Å—å –∞–∫–∫—É–º—É–ª–∏—Ä—É–µ–º –±–∞–π—Ç—ã (get_languages)

repos_info = []

for repo in org.get_repos(type="private"):
    repo_name = repo.name

    # –ü—Ä–æ–ø—É—Å—Ç–∏–º, –µ—Å–ª–∏ —ç—Ç–æ —Å–ª—É–∂–µ–±–Ω–æ–µ
    if repo_name == ".github-private":
        continue

    repo_count += 1
    # GitHub –¥–∞—ë—Ç —Ä–∞–∑–º–µ—Ä —Ä–µ–ø–æ –≤ Kb (repo.size). –ü–µ—Ä–µ–≤–µ–¥—ë–º –≤ MB:
    total_storage += repo.size / 1024

    # –°–ª–µ–¥–∏–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    if not last_activity or repo.updated_at > last_activity:
        last_activity = repo.updated_at

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        last_commit_date = repo.get_commits()[0].commit.committer.date
        last_commit_date = last_commit_date.astimezone(moscow_tz).strftime("%d.%m.%Y")
    except:
        last_commit_date = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ temp-–ø–∞–ø–∫—É –∏ –ø—Ä–æ–≥–æ–Ω—è–µ–º —á–µ—Ä–µ–∑ cloc
    with tempfile.TemporaryDirectory() as tmpdirname:
        repo_dir = os.path.join(tmpdirname, repo_name)
        clone_url = repo.clone_url.replace("https://", f"https://{GITHUB_TOKEN}@")

        clone_result = subprocess.run(
            ["git", "clone", "--depth", "1", clone_url, repo_dir],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE
        )

        if clone_result.returncode != 0:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏–º
            continue

        try:
            lines_output = subprocess.run(
                ["cloc", repo_dir, "--json", "--exclude-dir=.venv,__pycache__,.idea"],
                capture_output=True,
                text=True
            ).stdout

            if lines_output.strip():
                cloc_data = json.loads(lines_output)
                total_lines_repo = cloc_data.get("SUM", {}).get("code", 0)
                total_files_repo = cloc_data.get("SUM", {}).get("nFiles", 0)
            else:
                total_lines_repo = 0
                total_files_repo = 0

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏
            total_lines += total_lines_repo
            total_files += total_files_repo

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞ –ø–æ —è–∑—ã–∫–∞–º
            # (–≤ cloc_data –æ–±—ã—á–Ω–æ –µ—Å—Ç—å –∫–ª—é—á–∏ "header", "SUM" ‚Äî –∏—Ö –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
            for lang_name, lang_stats in cloc_data.items():
                if lang_name in ("header", "SUM"):
                    continue
                code_count = lang_stats.get("code", 0)
                if code_count > 0:
                    code_lines_per_language[lang_name] = (
                        code_lines_per_language.get(lang_name, 0) + code_count
                    )

        except:
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —É–ø–∞–ª–æ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º
            total_lines_repo = 0
            total_files_repo = 0

    # –î–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: —è–∑—ã–∫ –±–µ—Ä–µ–º –∏–∑ repo.language
    primary_lang = repo.language or "N/A"

    # –°–±–æ—Ä ¬´–±–∞–π—Ç–æ–≤¬ª –ø–æ —è–∑—ã–∫–∞–º –∏–∑ GitHub (repo.get_languages())
    repo_langs = repo.get_languages()  # { "Python": <bytes>, "C#": <bytes>, ...}
    for lang, size in repo_langs.items():
        bytes_per_language[lang] = bytes_per_language.get(lang, 0) + size

    # –°–±–æ—Ä –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤ (–¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
    for contributor in repo.get_contributors():
        all_contributors.add(contributor.login)
        if contributor.contributions > 10:
            active_contributors.add(contributor.login)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    repos_info.append({
        "name": repo_name,
        "html_url": repo.html_url,
        "language": primary_lang,
        "lines": total_lines_repo,
        "files": total_files_repo,
        "description": repo.description or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
        "last_commit": last_commit_date
    })

# –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
repos_info.sort(key=lambda r: r['lines'], reverse=True)

# –§–æ—Ä–º–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏ –¥–ª—è README.md
languages_section = format_languages_table(code_lines_per_language, bytes_per_language)
repositories_section = format_repos_table(repos_info)

# –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π Markdown, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
if last_activity:
    last_activity_str = last_activity.astimezone(moscow_tz).strftime("%d.%m.%Y")
else:
    last_activity_str = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

output_text = readme_template.format(
    org_name=ORG_NAME,
    repo_count=repo_count,
    total_lines=total_lines,
    total_files=total_files,
    total_storage=round(total_storage, 2),
    total_contributors=len(all_contributors),
    active_contributors=len(active_contributors),
    last_activity=last_activity_str,
    languages_section=languages_section,
    repositories_section=repositories_section
)

os.makedirs("profile", exist_ok=True)
output_path = os.path.join("profile", "README.md")
with open(output_path, "w", encoding="utf-8") as f:
    f.write(output_text)

print("README.md –æ–±–Ω–æ–≤–ª—ë–Ω!")
